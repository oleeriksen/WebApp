@page "/todo"
@inject Blazored.LocalStorage.ILocalStorageService localStore
@using ClientApp.Util

<PageTitle>Todo</PageTitle>

<h1>Todo  (not done: @todos.Count(todo => !todo.IsDone))</h1>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">IsDone?</th>
            <th scope="col">What to do</th>
            <th scope="col">Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var todo in todos)
        {
            <tr>
                <td><InputCheckbox @bind-Value="todo.IsDone" /></td>
                <td><InputText @bind-Value="todo.Title" /></td>
                <td>
                    <scan class="bi bi-x-circle-fill" style="color:red;" @onclick="() => DeleteToDo(todo)"></scan>
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="btn-group" role="group" style="margin:2px 0 10px 0;">
    <button class="btn btn-outline-primary" @onclick="UpdateLocalStorage">Save</button>
    <button class="btn btn-outline-primary" @onclick="ClearLocalStorage">Clear</button>
    <button class="btn btn-outline-primary" @onclick="SorterToDos">Sorter</button>
</div>
<br/>
<div>
    <InputText placeholder="Something todo" @bind-Value="newTodoTitle" />
    <button class="btn btn-outline-primary" @onclick="AddTodo">Add todo</button>
</div>


    @code {
        private string? newTodoTitle;

        private List<ToDoItem> todos = new();

        private const string todoKey = "todo";

        protected override async Task OnInitializedAsync()
        {
            var data = await localStore.GetItemAsync<List<ToDoItem>>(todoKey);
            if (data != null)
                todos = data;
        }

        private void AddTodo()
        {
            if (!string.IsNullOrWhiteSpace(newTodoTitle))
            {
                todos.Add(new ToDoItem { Title = newTodoTitle });
                newTodoTitle = string.Empty;
            }
        }

        public async void UpdateLocalStorage()
        {
            await localStore.SetItemAsync(todoKey, todos);
        }

        public async void ClearLocalStorage()
        {
            todos.Clear();
            await localStore.RemoveItemAsync(todoKey);
        }

        private void DeleteToDo(ToDoItem todo)
        {
            todos.Remove(todo);
        }

        private void SorterToDos()
        {
            todos.Sort();
        }


    }

