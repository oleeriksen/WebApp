@page "/todo"
@inject Blazored.LocalStorage.ILocalStorageService localStore
@using ClientApp.Util
@inject HttpClient Http;
@using Core.Model;

<PageTitle>Todo</PageTitle>

<h1>Todo  (not done: @todos.Count(todo => !todo.IsDone))</h1>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">IsDone?</th>
            <th scope="col">What to do</th>
            <th scope="col">Priority</th>
            <th scope="col">Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var todo in todos)
        {
            <tr>
                <td><InputCheckbox @bind-Value="todo.IsDone" /></td>
                <td><InputText @bind-Value="todo.Title" /></td>
                <td>
                    <InputSelect @bind-Value="todo.Priority" class="form-control">

                        @for (int i = 0; i < priorities.Length; i++)
                        {
                            <option value="@(i+1)">@priorities[i]</option>
                        }
                    </InputSelect>
                </td>
                <td>
                    <scan class="bi bi-x-circle-fill" style="color:red;" @onclick="() => DeleteToDo(todo)"></scan>
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="btn-group" role="group" style="margin:2px 0 10px 0;">
    <button class="btn btn-outline-primary" @onclick="UpdateLocalStorage">Save</button>
    <button class="btn btn-outline-primary" @onclick="ClearLocalStorage">Clear</button>
    <button class="btn btn-outline-primary" @onclick="SorterToDos">Sorter</button>
</div>
<br />
<div>
    <InputText placeholder="Something todo" @bind-Value="newTodoTitle" />
    <button class="btn btn-outline-primary" @onclick="AddTodo">Add todo</button>
</div>


@code {

    private string[] priorities = { "Lav", "Middel", "Høj" };
    private string? newTodoTitle;

    private ToDoItem[] todos = new ToDoItem[0];

    protected override async Task OnInitializedAsync()
    {
        await UpdateList();
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodoTitle))
        {
            var newItem = new ToDoItem { Title = newTodoTitle };
            await Http.PostAsJsonAsync<ToDoItem>("https://localhost:7060/api/todo/add", newItem);

            UpdateList();
            newTodoTitle = string.Empty;
        }
    }

    public void UpdateLocalStorage()
    {
        //await localStore.SetItemAsync(todoKey, todos);
    }

    public void ClearLocalStorage()
    {
    }

    private async Task DeleteToDo(ToDoItem todo)
    {
        await Http.DeleteAsync($"https://localhost:7060/api/todo/delete/{todo.Id}");
        UpdateList();


    }

    private async Task UpdateList() {
        todos = await Http.GetFromJsonAsync<ToDoItem[]>("https://localhost:7060/api/todo/getall");

        StateHasChanged();
    }

    private void SorterToDos()
    {
    }
    }

